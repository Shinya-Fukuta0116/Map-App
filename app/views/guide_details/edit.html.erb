<br>
<!--data-latlng="(35.1603237, 136.9040502)" data-lat="35.1603237" data-lng="136.9040502"-->
<!--data-latlng="(35.1648142, 136.9040502)" data-lat="35.1648142" data-lng="136.9040502"-->

  <form id="form">
    <%= csrf_meta_tags %>
    <strong><label for="address">住所または地名</label></strong>
    <input type="text" id="address" size="35" onkeydown="searchOnEnter(event)">
    <input type="button" value="検索" class="btn btn-dark" onclick="codeAddress()">
    <input type="button" onclick="save()" value="保存" class="btn btn-dark">
    <input type="button" onclick="route_making()" value="ルート作成" class="btn btn-dark">
    <div id="qrcode-container">
      <input type="button" onclick="ajaxtest(<%= @guide.id %>)" id="show-qrcode-button" value="QR作成" class="btn btn-warning">
      <div id="qrcode" style="display: none;">
        <canvas width="128" height="128"></canvas>
        <img>
      </div>
    </div>

  </form>
    顧客名:<%=@guide.customer_name %>さん
<br>
<div class="row">
  <div class="col-md-6">
    <div id='map'></div>
    <style>
      #map {
        height: 540px;
        width: 540px;
      }
    </style>
    <script>
      // ボタン要素を取得します
      var showQRCodeButton = document.getElementById("show-qrcode-button");

      // QRコードを表示するための関数を定義します
      function showQRCode() {
        var qrcodeContainer = document.getElementById("qrcode");
        qrcodeContainer.style.display = "block";

        // ここでQRコードの生成処理を行います

        // 例として、QRコード画像のURLを設定します
        var qrCodeImage = qrcodeContainer.querySelector("img");
        qrCodeImage.src = "https://example.com/qrcode.png";
      }

      // ボタンにクリックイベントリスナーを追加します
      showQRCodeButton.addEventListener("click", showQRCode);
    </script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>

    <script>

      window.addEventListener("load", ()=>{
        let today = new Date();
        let week = ["日", "月", "火", "水", "木", "金", "土"];
        let year = today.getFullYear();
        let month = today.getMonth() + 1; // 1月~12月 -> 0~11
        let date = today.getDate();
        let day = today.getDay();
        document.getElementById("date").innerHTML = year + "/" + month + "/" + date + "(" + week[day] + ")";
      });
        //関数名timerを定義
      let timer = () => {
          //現在の日時を変数nowに入れる
        let now = new Date();
        //id=timerタグの中身を書き換える
        document.getElementById('RealtimeClockArea').innerHTML =
        now.getHours() + '時' + now.getMinutes() + '分' + now.getSeconds() + '秒';
      }

      //setInterval(やりたい処理, 何msec毎に行うか？)
      let timerID = setInterval(timer, 500);

      $(function(){
       $('#ul').sortable();
      });

      $(document).on("change",".preview-uploader",function(){
      let elem = this                                                 //操作された要素を取得
      let fileReader = new FileReader();                              //ファイルを読み取るオブジェクトを生成
      fileReader.readAsDataURL(elem.files[0]);                        //ファイルを読み取る
      fileReader.onload = (function () {                              //ファイル読み取りが完了したら
          let imgTag = `<img width="300" src='${fileReader.result}'>` //img要素を生成
          $(elem).next(".preview").html(imgTag)                       //画像をプレビュー
          });
      })

      function searchOnEnter(event) {
        if (event.keyCode === 13) {
          codeAddress();
          event.preventDefault(); // Prevent form submission
        }
      }

      //初期マップの設定
      let map
      let marker
      let directionsService
      let directionsRenderer
      const ul = document.getElementById("ul");

      function initMap() {
        geocoder = new google.maps.Geocoder()

        map = new google.maps.Map(document.getElementById('map'), {
          center: { lat: 35.6803997, lng: 139.7690174 }, //東京
          zoom: 16,

        });
        directionsService = new google.maps.DirectionsService();
        directionsRenderer = new google.maps.DirectionsRenderer({
          suppressMarkers: true // デフォルトのマーカーを削除
        });
      }
      let addressListCount = 0;
      function route_making() {
        $("#ul li[data-checked='false']:first"); //リストの一番目を指定
        $("#ul li[data-checked='false']:last");  //リストの最後を指定
        $("#ul li[data-checked='false']"); //それ以外のリスト
        let wayarray = []; //空の変数を用意
        $("#ul li[data-checked='false']").not(':first').not(':last').each(function(){ //li(一番目と最後を除く)を一つずつ取り出す
          console.log($(this).data("lat"))
          console.log($(this).data("lng"))
          let pos = new google.maps.LatLng($(this).data("lat"), $(this).data("lng")); //thisで取得し変数へ
          wayarray.push({location: pos}); //経由地点の空変数へ入れる。
        });

        const first_lat = $("#ul li[data-checked='false']:first").data("lat"); //リストの一番目を指定
        const first_lng = $("#ul li[data-checked='false']:first").data("lng"); //リストの一番目を指定
        const last_lat  =  $("#ul li[data-checked='false']:last").data("lat");  //リストの最後を指定
        const last_lng  =  $("#ul li[data-checked='false']:last").data("lng");  //リストの最後を指定
        console.log(':li')

        const pos1 =  new google.maps.LatLng(first_lat, first_lng);
        const pos2 =  new google.maps.LatLng(last_lat, last_lng);

        //const routeconnect = $('li').data("latlng", "lat", "lng");
        //const latlng1 = new google.maps.LatLng(event.target.dataset.lat, event.target.dataset.lng)
        //const latlng2 = new google.maps.LatLng(event.target.dataset.lat, event.target.dataset.lng)
        console.log("latlng")
        //const pos1 =  new google.maps.LatLng(35.1603237, 136.9040502);
        //const pos2 =  new google.maps.LatLng(35.1648142, 136.9040502);
        let request = {
		      origin: pos1, //スタート
		      destination: pos2, //ゴール
		      waypoints: wayarray, //経由地点
		      travelMode: google.maps.DirectionsTravelMode.WALKING, //移動手段
	      };
	      directionsService.route(request, function(result, status) {
      		if (status == google.maps.DirectionsStatus.OK) {
      			directionsRenderer.setOptions({
      				preserveViewport: false //ズーム率を変更してルート全体を表示しない
      	   });
			// ルート検索の結果を地図上に描画
    			directionsRenderer.setDirections(result);
    			directionsRenderer.setMap(map);
		      }
	      });
      }
      let routeData = [];  // ルートデータを保持する配列
      function save() {
        console.log("保存");
        const li = document.createElement("li");
        //li.innerText = searched_result.formatted_address;
        li.innerHTML =''+ searched_result.formatted_address + '<br><input type= "text"><input type = "file" class="preview-uploader"><div class="preview" style="width:300px;"></div>';
        li.id = "iro" + addressListCount;
        li.dataset.checked = false;
        li.dataset.latlng = searched_result.geometry.location;
        li.dataset.lat = searched_result.geometry.location.lat();
        li.dataset.lng = searched_result.geometry.location.lng();
        //addressListCount = addressListCount + 1;
        const ul = document.getElementById("ul");
        ul.appendChild(li);

        document.getElementById("iro" + addressListCount).addEventListener("click", function(event) {
          //const text = document.getElementById("iro" + addressListCount).textContent;
          //console.log(text);
          //document.getElementById("iro" + addressListCount).textContent = "案内しない";
          //document.getElementById("iro" + addressListCount).textContent = null;
          //document.getElementById("iro" + addressListCount).style.textDecoration = "line-through";
          const latlng = new google.maps.LatLng(event.target.dataset.lat, event.target.dataset.lng)
          map.setCenter(latlng);



          const checked = event.target.dataset.checked;
          if (checked == 'false') {
            event.target.style.textDecoration = "line-through";
            //results[0].geometry.location = searched_result.geometry.location;
            event.target.dataset.checked = true;
          }else {
            event.target.style.textDecoration = "";
            //results[0].geometry.location = searched_result.geometry.location;
            event.target.dataset.checked = false;
          }
        })
        routeData.push({
          lat: searched_result.geometry.location.lat(),
          lng: searched_result.geometry.location.lng()
        });
      }

      /*let addressListCount = 0;

      function tekitou() {
        console.log("住所");
        const li = document.createElement("li");
        li.innerText = searched_result.formatted_address;
        li.id = "iro" + addressListCount;
        addressListCount = addressListCount + 1;
        const ul = document.getElementById("ul");
        ul.appendChild(li);
      }
      */
      /*function tekitou2() {
        console.log("tekitou2");
            document.getElementById("iro0").style.color = "red";
      }
      */
      //検索後のマップ作成
      let geocoder
      let aft
      let searched_result = "";
      let infoWindowDetail = "";

      function codeAddress() {
        let inputAddress = document.getElementById('address').value;
        geocoder.geocode({ 'address': inputAddress }, function(results, status) {
          if (status == 'OK') {
            addressListCount = addressListCount + 1;
            searched_result = results[0];
            map.setCenter(results[0].geometry.location);
            const latlng = results[0].geometry.location;
            //新しくマーカーを作成する
            marker = new google.maps.Marker({
              map: map,
              position: results[0].geometry.location,
              draggable: true // ドラッグ可能にする
            });

            let ironame = "iro" + addressListCount
            let infoWindowDetail = results[0].formatted_address;
            /*let infoWindowCount = 0;
                infoWindowDetail.id = "fukidashi" + infoWindowCount;
                infoWindowCount = infoWindowCount + 1;
            let fukidashiDetail = "fukidashi" + infoWindowCount;
            */
            let infoWindow = new google.maps.InfoWindow({
                content: '<div class="window">' + infoWindowDetail + '</div>'
            //吹き出しを追加
              })
            //google.maps.event.addListener(marker, 'click', (event) => {
            marker.addListener("click", (event) => {
              console.log('markerClicked')
              console.log(event)
              let element = document.getElementById(ironame)
              if(element) {
                element.style.color = "crimson";
              }
              console.log('markeradd')
              infoWindow.open(map, marker);
            });
            google.maps.event.addListener(infoWindow, 'closeclick', () => {
              marker.setMap(null);  //マーカーを削除
              //document.getElementById("iro" + addressListCount).textContent = null; //リスト削除
            });


            //二度目以降か判断
            //aft = true

              //検索した時に緯度経度を入力する
              //document.getElementById('latitude').value = results[0].geometry.location.lat();
              //document.getElementById('longitude').value = results[0].geometry.location.lng();

            // マーカーのドロップ（ドラッグ終了）時のイベント
            //google.maps.event.addListener(marker, 'dragend', function(ev) {
              // イベントの引数evの、プロパティ.latLngが緯度経度
              //document.getElementById('latitude').value = ev.latLng.lat();
             // document.getElementById('longitude').value = ev.latLng.lng();
            //});
          }
          else {
            alert('該当する結果がありませんでした：' + status);
          }
        });
      }


      // QRコードを生成して表示する関数
      function generateQRCode(text) {
        const qrcode = new QRCode(document.getElementById("qrcode"), {
          text: text,
          width: 128,
          height: 128,
        });
      }

      // QRコード生成と表示の処理

      function ajaxtest(guide_id){
        const data = {
          key1: "value1",
          key2: "value2",
          routeData: routeData,
        };
          $.ajax({
            method:"post",
            url:"/guide_details/"+guide_id+"/edit/guide_map",
            data:JSON.stringify(data),  // JSONデータ本体
            contentType: 'application/json', // リクエストの Content-Type
            dataType: "json",
            success: function(response) {
              // 成功した場合にQRコードを生成して表示
              generateQRCode(response.qrCodeData);
            },
            error: function() {
              // エラー処理
            }
          })
      }

    </script>
  </div>

  <div class="col-md-6">
    <style>
      .ulist{
        list-style: none;
        line-height:2em;
        line-width: 540px;
      	cursor:pointer;
       }
    </style>
    <ul class="ulist", "list-group text-secondary" id="ul">
    </ul>
  </div>
</div>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['SECRET_KEY'] %>&callback=initMap" async defer></script>
<script src="https://cdn.rawgit.com/davidshimjs/qrcodejs/gh-pages/qrcode.min.js"></script>


<table class="table table-dark">
